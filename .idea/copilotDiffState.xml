<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Nextcloud Watchdog&#10;&#10;## Overview&#10;The Nextcloud Watchdog script is designed to monitor the health and availability of a Nextcloud instance. It performs periodic checks and takes corrective actions, such as restarting the system, if issues are detected. Notifications about the status are sent via Telegram.&#10;&#10;## Features&#10;- Monitors the availability of a Nextcloud instance.&#10;- Sends notifications to a specified Telegram chat.&#10;- Logs status and actions taken.&#10;- Implements cooldown periods to avoid frequent restarts.&#10;- Configurable via an `.env` file.&#10;&#10;## Repository&#10;The source code for this project is hosted on GitHub:&#10;[git@github.com:rafahsolis/nc_watchdog.git](git@github.com:rafahsolis/nc_watchdog.git)&#10;&#10;## Installation&#10;&#10;### Prerequisites&#10;Ensure the following dependencies are installed on your system:&#10;- `curl`&#10;- `ss`&#10;&#10;### Steps&#10;1. Clone or copy the script files to your desired directory:&#10;   ```bash&#10;   git clone git@github.com:rafahsolis/nc_watchdog.git&#10;   cd nc_watchdog&#10;   ```&#10;2. Navigate to the script directory:&#10;   ```bash&#10;   cd /path/to/nextcloud/watchdog&#10;   ```&#10;3. Create an `.env` file by copying the provided `.env_template`:&#10;   ```bash&#10;   cp .env_template .env&#10;   ```&#10;4. Edit the `.env` file to configure the script:&#10;   - Set the `DOMAIN` to your Nextcloud instance domain.&#10;   - Provide your Telegram bot token and chat ID.&#10;   - Adjust other settings as needed (e.g., timeouts, file paths).&#10;5. Make the script executable:&#10;   ```bash&#10;   chmod +x nc_watchdog.sh&#10;   ```&#10;6. (Optional) Set up a cron job to run the script periodically. For example, to run it every 5 minutes:&#10;   ```bash&#10;   */5 * * * * /path/to/nextcloud/watchdog/nc_watchdog.sh&#10;   ```&#10;&#10;## Configuration&#10;The script uses an `.env` file for configuration. Below are the key settings:&#10;&#10;- **Domain and Basic Settings**&#10;  - `DOMAIN`: The domain of your Nextcloud instance.&#10;  - `RETRIES`: Number of retries before taking action.&#10;  - `SLEEP_BETWEEN`: Time (in seconds) between retries.&#10;  - `COOLDOWN_SECS`: Cooldown period (in seconds) after a restart.&#10;&#10;- **Telegram Notification Settings**&#10;  - `TELEGRAM_BOT_TOKEN`: Token for your Telegram bot.&#10;  - `TELEGRAM_CHAT_ID`: Chat ID to send notifications to.&#10;&#10;- **Paths and File Names**&#10;  - `WATCHDOG_DIR`: Directory where the script is located.&#10;  - `ENV_FILE`: Name of the `.env` file.&#10;  - `BLOCK_FILENAME`, `LOG_FILENAME`, `COOLDOWN_FILENAME`, `STATUS_FILENAME`: File names used by the script.&#10;&#10;- **Network Settings**&#10;  - `HTTPS_PORT`: Port to check for HTTPS availability.&#10;  - `EXTERNAL_CONNECT_TIMEOUT`, `EXTERNAL_MAX_TIME`: Timeouts for external checks.&#10;  - `LOCAL_CONNECT_TIMEOUT`, `LOCAL_MAX_TIME`: Timeouts for local checks.&#10;&#10;- **System Dependencies**&#10;  - `REQUIRED_DEPS`: Space-separated list of required system commands.&#10;&#10;- **Reboot Commands**&#10;  - `REBOOT_COMMANDS`: Commands to attempt for restarting the system.&#10;&#10;## Logging&#10;The script logs its actions and status to the file specified in the `LOG_FILENAME` variable (default: `nc_watchdog.log`).&#10;&#10;## License&#10;This script is provided as-is. Use at your own risk.&#10;" />
              <option name="updatedContent" value="# Nextcloud Watchdog&#10;&#10;## Overview&#10;Nextcloud Watchdog is a Bash script that monitors the health and HTTPS availability of your Nextcloud instance. If the service becomes unreachable (externally or locally), the script can automatically reboot the host and send notifications via Telegram. It also supports manual and cooldown blocks to prevent unwanted reboots.&#10;&#10;## Features&#10;- Monitors HTTPS availability from both external and local perspectives&#10;- Sends Telegram notifications on failure and recovery&#10;- Logs all actions and status changes&#10;- Cooldown mechanism to avoid frequent reboots&#10;- Manual block to prevent automatic reboots&#10;- Easy configuration via `.env` file&#10;&#10;## Repository&#10;Source code: [https://github.com/rafahsolis/nc_watchdog](https://github.com/rafahsolis/nc_watchdog)&#10;&#10;## Installation&#10;&#10;### Prerequisites&#10;- Linux system with Bash&#10;- `curl` and `ss` installed&#10;- Telegram bot and chat ID (for notifications)&#10;&#10;### Steps&#10;1. Clone the repository:&#10;   ```bash&#10;   git clone git@github.com:rafahsolis/nc_watchdog.git&#10;   cd nc_watchdog&#10;   ```&#10;2. Copy and edit the environment file:&#10;   ```bash&#10;   cp .env_template .env&#10;   # Edit .env to set DOMAIN, Telegram credentials, and other options&#10;   ```&#10;3. Make the script executable:&#10;   ```bash&#10;   chmod +x nc_watchdog.sh&#10;   ```&#10;&#10;## Usage&#10;Run the script manually or set it up as a cron job:&#10;```bash&#10;./nc_watchdog.sh&#10;```&#10;&#10;### Example Cron Setup&#10;To run every 5 minutes:&#10;```&#10;*/5 * * * * /path/to/nc_watchdog.sh&#10;```&#10;&#10;## Behavior&#10;- The script checks HTTPS availability externally and locally.&#10;- If either check fails, it logs the failure and, after retries, reboots the host (unless blocked or in cooldown).&#10;- Telegram notifications are sent on failure and recovery.&#10;- All actions are logged in `nc_watchdog.log`.&#10;- Manual block: create a file named `block_restart.txt` in the script directory to prevent reboots.&#10;- Cooldown: after a reboot, the script waits a configurable period before allowing another reboot.&#10;&#10;## Troubleshooting&#10;- Check `nc_watchdog.log` for details on failures and actions.&#10;- Ensure your `.env` file is correctly configured.&#10;- Make sure required dependencies (`curl`, `ss`) are installed and in your PATH.&#10;- If Telegram notifications do not work, verify your bot token and chat ID.&#10;&#10;## License&#10;See the repository for license details.&#10;&#10;## Author&#10;[rafahsolis](https://github.com/rafahsolis)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>